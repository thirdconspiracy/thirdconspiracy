using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace thirdconspiracy.Utilities.Utilities
{
    public class ClassBuilder
    {
        #region Member Variables

        private readonly HashSet<string> _usingStatements;
        private readonly StringBuilder _classMembers;

        #endregion Member Variables

        #region Constructors

        public ClassBuilder()
        {
            _usingStatements = new HashSet<string>
            {
                "using System;",
                "using System.Text;"
            };
            _classMembers = new StringBuilder();
        }

        #endregion Constructors

        #region Append Members

        public void Append(string memberName, Dictionary<string, List<string>> objectContent)
        {
            _usingStatements.Add("using System.Collections.Generic;");
            _classMembers.AppendLine(ToInitString(memberName, objectContent));
        }

        public void Append(string memberName, Dictionary<string, string> objectContent)
        {
            _usingStatements.Add("using System.Collections.Generic;");
            _classMembers.AppendLine(ToInitString(memberName, objectContent));
        }

        public void AppendConstant(string memberName)
        {
            AppendConstant(memberName, null);
        }

        public void AppendConstant(string memberName, string value)
        {
            _classMembers.AppendLine($"public const string {memberName} = \"{value ?? memberName}\";");
        }

        #endregion Append Members

        #region ToInitString

        private static string ToInitString(string value)
        {
            return string.Format("\"{0}\"", value);
        }

        private string ToInitString(List<string> list)
        {
            var sb = new StringBuilder();
            sb.Append("new List<string> { ");
            sb.Append(string.Join(",", list.Select(ToInitString)));
            sb.Append(" }");
            return sb.ToString();
        }

        private string ToInitString(string memberName, Dictionary<string, List<string>> value)
        {
            var sb = new StringBuilder();
            sb.AppendLine(string.Format("public static readonly Dictionary<string, List<string>> {0} = new Dictionary<string, List<string>>", memberName));
            sb.AppendLine("{");

            foreach (var kvp in value)
            {
                sb.Append("[");
                sb.Append(ToInitString(kvp.Key));
                sb.Append("] = ");
                sb.Append(ToInitString(kvp.Value));
                sb.AppendLine(",");
            }

            sb.AppendLine("};");

            return sb.ToString();

        }

        private string ToInitString(string memberName, Dictionary<string, string> value)
        {
            var sb = new StringBuilder();
            sb.AppendLine(string.Format("public static readonly Dictionary<string, string> {0} = new Dictionary<string, string>", memberName));
            sb.AppendLine("{");

            foreach (var kvp in value)
            {
                sb.Append("[");
                sb.Append(ToInitString(kvp.Key));
                sb.Append("] = ");
                sb.Append(ToInitString(kvp.Value));
                sb.AppendLine(",");
            }

            sb.AppendLine("};");

            return sb.ToString();

        }

        #endregion ToInitString

        #region Write Class

        public void WriteClass(string fullpath, string className, string classNamespace = null)
        {
            var sb = new StringBuilder();
            sb.AppendLine($"//ChannelAdvisor Autogenerated File: {DateTime.UtcNow:O}\n");
            foreach (var usingStatement in _usingStatements)
            {
                sb.AppendLine(usingStatement);
            }

            if (string.IsNullOrWhiteSpace(classNamespace))
            {
                classNamespace = "ChannelAdvisor.ChannelSync.WalmartMarketplace";
            }
            sb.AppendLine($"namespace {classNamespace} {{");
            sb.AppendLine("public class " + className);
            sb.AppendLine("{");
            sb.AppendLine(_classMembers.ToString());
            sb.AppendLine("}");
            sb.AppendLine("}");

            var fullClassStr = sb.ToString();

            File.WriteAllText(fullpath, fullClassStr);
        }

        #endregion Write Class

    }
}
