using System;
using System.Collections;
using System.Linq;
using CodeWars.DataStructures.SparseTable;
using NUnit.Framework;

namespace CodeWars.Test.HackerRank
{
	public class QueriesWithFixedLengthTests
	{
		[Test]
		public void Test1()
		{
			var arr = 
				
					.Split(' ')
					.Select(int.Parse)
					.ToArray();
			var queries =
				"78 96 89 29 81 17 50 34 8 17 58 7 65 59 3 58 80 31 21 12 87 19 6 70 60 98 55 27 67 94 57 69 14 66 52 73 62 73 30 77 38 23 15 63 25 72 89 91 25 38 88 22 48 79 71 33 72 21 26 59 100 43 77 81 55 44 43 2 42 48 1 30 33 71 94 58 34 93 58 27 92 91 83 47 61 34 25 88 37 90 3 95 5 68 39 40 71 56 89 4"
					.Split(' ')
					.Select(int.Parse)
					.ToArray();

			var actualOutput = Solve(arr, queries);

			var expectedOutput =
				
					.Split(' ')
					.Select(int.Parse)
					.ToArray();
			Assert.Multiple(() =>
			{
				for (var i = 0; i < expectedOutput.Length; i++)
				{
					Assert.AreEqual(actualOutput[i], expectedOutput[i]);
				}
			});
		}

		private int[] Solve(int[] arr, int[] queries)
		{
			var array = new SparseArray();
			var ret = new int[queries.Length];
			var table = new MaxSparseTable(arr);
			for (var q = 0; q < queries.Length; q++)
			{
				var min = int.MaxValue;
				for (var i = 0; i + queries[q] <= arr.Length; i++)
				{
					var max = table.Query(i, i + queries[q] - 1);
					min = Math.Min(min, max);
				}
				ret[q] = min;
			}

			return ret;
		}
	}
}
